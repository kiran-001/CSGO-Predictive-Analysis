{"cells":[{"cell_type":"code","execution_count":2,"id":"7bc15115","metadata":{"id":"7bc15115","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504012238,"user_tz":300,"elapsed":10302,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"e5332372-5564-417d-e92e-e0ce33d7cbcc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import dask.dataframe as dd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import os\n","import gc\n","\n","from sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"id":"5b000825","metadata":{"id":"5b000825","executionInfo":{"status":"ok","timestamp":1702504012238,"user_tz":300,"elapsed":3,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[],"source":["def reduce_mem_usage(df):\n","    \"\"\" iterate through all the columns of a dataframe and modify the data type\n","        to reduce memory usage.\n","    \"\"\"\n","    start_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n","\n","    for col in df.columns:\n","        if 'pos' in col: continue\n","        col_type = df[col].dtype\n","\n","        if col_type != object:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)\n","            else:\n","                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)\n","        else:\n","            df[col] = df[col].astype('category')\n","\n","    end_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n","    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n","\n","    return df\n","\n","\n","def import_data(file):\n","    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n","    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n","    df = reduce_mem_usage(df)\n","    return df"]},{"cell_type":"code","execution_count":4,"id":"c5754c82","metadata":{"id":"c5754c82","colab":{"base_uri":"https://localhost:8080/","height":629},"executionInfo":{"status":"ok","timestamp":1702504015069,"user_tz":300,"elapsed":2833,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"900e32e2-afc1-4a45-cbfd-d32f2277e2ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 16.47 MB\n","Memory usage after optimization is: 4.23 MB\n","Decreased by 74.3%\n","Memory usage of dataframe is 12.34 MB\n","Memory usage after optimization is: 3.23 MB\n","Decreased by 73.8%\n","<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 377629 entries, 0 to 161709\n","Data columns (total 10 columns):\n"," #   Column         Non-Null Count   Dtype   \n","---  ------         --------------   -----   \n"," 0   file           377629 non-null  object  \n"," 1   map            377629 non-null  category\n"," 2   round          377629 non-null  int8    \n"," 3   start_seconds  377589 non-null  float16 \n"," 4   end_seconds    377589 non-null  float16 \n"," 5   winner_team    377628 non-null  object  \n"," 6   winner_side    377629 non-null  object  \n"," 7   round_type     377629 non-null  category\n"," 8   ct_eq_val      377629 non-null  int32   \n"," 9   t_eq_val       377629 non-null  int32   \n","dtypes: category(2), float16(2), int32(2), int8(1), object(3)\n","memory usage: 16.9+ MB\n"]},{"output_type":"execute_result","data":{"text/plain":["                      file          map  round  start_seconds  end_seconds  \\\n","0  esea_match_13770997.dem  de_overpass      1        94.3125       161.00   \n","1  esea_match_13770997.dem  de_overpass      2       161.0000       279.50   \n","2  esea_match_13770997.dem  de_overpass      3       279.5000       341.00   \n","3  esea_match_13770997.dem  de_overpass      4       341.0000       435.50   \n","4  esea_match_13770997.dem  de_overpass      5       435.5000       484.25   \n","\n","        winner_team       winner_side    round_type  ct_eq_val  t_eq_val  \n","0  Hentai Hooligans         Terrorist  PISTOL_ROUND       4300      4250  \n","1  Hentai Hooligans         Terrorist           ECO       6300     19400  \n","2  Hentai Hooligans         Terrorist      SEMI_ECO       7650     19250  \n","3  Hentai Hooligans         Terrorist        NORMAL      24900     23400  \n","4      Animal Style  CounterTerrorist           ECO       5400     20550  "],"text/html":["\n","  <div id=\"df-665779e7-a6b2-4456-ac1d-d54aabe7aa18\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file</th>\n","      <th>map</th>\n","      <th>round</th>\n","      <th>start_seconds</th>\n","      <th>end_seconds</th>\n","      <th>winner_team</th>\n","      <th>winner_side</th>\n","      <th>round_type</th>\n","      <th>ct_eq_val</th>\n","      <th>t_eq_val</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>1</td>\n","      <td>94.3125</td>\n","      <td>161.00</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>PISTOL_ROUND</td>\n","      <td>4300</td>\n","      <td>4250</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>2</td>\n","      <td>161.0000</td>\n","      <td>279.50</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>ECO</td>\n","      <td>6300</td>\n","      <td>19400</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>3</td>\n","      <td>279.5000</td>\n","      <td>341.00</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>SEMI_ECO</td>\n","      <td>7650</td>\n","      <td>19250</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>4</td>\n","      <td>341.0000</td>\n","      <td>435.50</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>NORMAL</td>\n","      <td>24900</td>\n","      <td>23400</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>5</td>\n","      <td>435.5000</td>\n","      <td>484.25</td>\n","      <td>Animal Style</td>\n","      <td>CounterTerrorist</td>\n","      <td>ECO</td>\n","      <td>5400</td>\n","      <td>20550</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-665779e7-a6b2-4456-ac1d-d54aabe7aa18')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-665779e7-a6b2-4456-ac1d-d54aabe7aa18 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-665779e7-a6b2-4456-ac1d-d54aabe7aa18');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-331cade3-77e2-42e5-84e2-97b85d913bd2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-331cade3-77e2-42e5-84e2-97b85d913bd2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-331cade3-77e2-42e5-84e2-97b85d913bd2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}],"source":["\n","games_df_part1 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_meta_demos.part1.csv')\n","games_df_part2 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_meta_demos.part2.csv')\n","games_df = pd.concat([games_df_part1, games_df_part2])\n","games_df.info()\n","games_df.head()"]},{"cell_type":"code","execution_count":5,"id":"fcf0df57","metadata":{"id":"fcf0df57","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504028640,"user_tz":300,"elapsed":13576,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"76b6f653-9b70-47ab-be27-0a3047d90355"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 145.19 MB\n","Memory usage after optimization is: 28.76 MB\n","Decreased by 80.2%\n","Memory usage of dataframe is 108.53 MB\n","Memory usage after optimization is: 21.56 MB\n","Decreased by 80.1%\n","<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 2742646 entries, 0 to 1173168\n","Data columns (total 13 columns):\n"," #   Column           Dtype   \n","---  ------           -----   \n"," 0   file             object  \n"," 1   round            int8    \n"," 2   tick             int32   \n"," 3   seconds          float16 \n"," 4   att_team         object  \n"," 5   vic_team         object  \n"," 6   att_side         category\n"," 7   vic_side         category\n"," 8   wp               object  \n"," 9   wp_type          category\n"," 10  ct_alive         int8    \n"," 11  t_alive          int8    \n"," 12  is_bomb_planted  float16 \n","dtypes: category(3), float16(2), int32(1), int8(3), object(4)\n","memory usage: 141.2+ MB\n"]}],"source":["# Dataframe: kills\n","kills_df_part1 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_kills_demos.part1.csv')\n","kills_df_part2 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_kills_demos.part2.csv')\n","kills_df = pd.concat([kills_df_part1, kills_df_part2])\n","kills_df.info()"]},{"cell_type":"code","execution_count":6,"id":"1e30886c","metadata":{"id":"1e30886c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504119909,"user_tz":300,"elapsed":91273,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"68e05f73-c9e3-421c-d6a0-57ef2c164de8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 1011.47 MB\n","Memory usage after optimization is: 406.05 MB\n","Decreased by 59.9%\n","Memory usage of dataframe is 767.38 MB\n","Memory usage after optimization is: 308.12 MB\n","Decreased by 59.8%\n","<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 10538182 entries, 0 to 4546084\n","Data columns (total 23 columns):\n"," #   Column           Dtype   \n","---  ------           -----   \n"," 0   file             object  \n"," 1   round            int8    \n"," 2   tick             int32   \n"," 3   seconds          float16 \n"," 4   att_team         object  \n"," 5   vic_team         object  \n"," 6   att_side         category\n"," 7   vic_side         category\n"," 8   hp_dmg           int8    \n"," 9   arm_dmg          int8    \n"," 10  is_bomb_planted  float16 \n"," 11  bomb_site        category\n"," 12  hitbox           category\n"," 13  wp               object  \n"," 14  wp_type          category\n"," 15  att_id           int64   \n"," 16  att_rank         int8    \n"," 17  vic_id           int64   \n"," 18  vic_rank         int8    \n"," 19  att_pos_x        float64 \n"," 20  att_pos_y        float64 \n"," 21  vic_pos_x        float64 \n"," 22  vic_pos_y        float64 \n","dtypes: category(5), float16(2), float64(4), int32(1), int64(2), int8(5), object(4)\n","memory usage: 1.0+ GB\n"]}],"source":["# Dataframe: damage\n","damage_df_part1 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_dmg_demos.part1.csv')\n","damage_df_part2 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_dmg_demos.part2.csv')\n","damage_df = pd.concat([damage_df_part1, damage_df_part2])\n","damage_df.info()"]},{"cell_type":"code","execution_count":7,"id":"599e51ed","metadata":{"id":"599e51ed","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504159106,"user_tz":300,"elapsed":39205,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"2d9b91c9-dcdb-4fbc-eb61-b9d2081cc3ab"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 504.72 MB\n","Memory usage after optimization is: 191.37 MB\n","Decreased by 62.1%\n","Memory usage of dataframe is 380.88 MB\n","Memory usage after optimization is: 144.48 MB\n","Decreased by 62.1%\n","<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 5246458 entries, 0 to 2256397\n","Data columns (total 23 columns):\n"," #   Column           Dtype   \n","---  ------           -----   \n"," 0   file             object  \n"," 1   round            int8    \n"," 2   seconds          float16 \n"," 3   att_team         object  \n"," 4   vic_team         object  \n"," 5   att_id           int64   \n"," 6   vic_id           float32 \n"," 7   att_side         category\n"," 8   vic_side         category\n"," 9   hp_dmg           int8    \n"," 10  arm_dmg          int8    \n"," 11  is_bomb_planted  float16 \n"," 12  bomb_site        category\n"," 13  hitbox           category\n"," 14  nade             category\n"," 15  att_rank         int8    \n"," 16  vic_rank         float16 \n"," 17  att_pos_x        float64 \n"," 18  att_pos_y        float64 \n"," 19  nade_land_x      float16 \n"," 20  nade_land_y      float16 \n"," 21  vic_pos_x        float64 \n"," 22  vic_pos_y        float64 \n","dtypes: category(5), float16(5), float32(1), float64(4), int64(1), int8(4), object(3)\n","memory usage: 475.3+ MB\n"]}],"source":["gren_df_part1 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_grenades_demos.part1.csv')\n","gren_df_part2 = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/esea_master_grenades_demos.part2.csv')\n","grenade_df = pd.concat([gren_df_part1, gren_df_part2])\n","grenade_df.info()"]},{"cell_type":"code","execution_count":8,"id":"424a783e","metadata":{"id":"424a783e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504159404,"user_tz":300,"elapsed":303,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"80c3e1fd-a522-4553-8e50-90cc98e42afb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 0.00 MB\n","Memory usage after optimization is: 0.00 MB\n","Decreased by -10.6%\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7 entries, 0 to 6\n","Data columns (total 7 columns):\n"," #   Column      Non-Null Count  Dtype   \n","---  ------      --------------  -----   \n"," 0   Unnamed: 0  7 non-null      category\n"," 1   EndX        7 non-null      int16   \n"," 2   EndY        7 non-null      int16   \n"," 3   ResX        7 non-null      int16   \n"," 4   ResY        7 non-null      int16   \n"," 5   StartX      7 non-null      int16   \n"," 6   StartY      7 non-null      int16   \n","dtypes: category(1), int16(6)\n","memory usage: 575.0 bytes\n"]}],"source":["map_data_df = import_data('/content/drive/MyDrive/Colab Notebooks/ML_Final_Project/map_data.csv')\n","\n","map_data_df.info()"]},{"cell_type":"code","execution_count":9,"id":"fe7173cd","metadata":{"id":"fe7173cd","executionInfo":{"status":"ok","timestamp":1702504159404,"user_tz":300,"elapsed":3,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[],"source":["del games_df_part1\n","del games_df_part2\n","\n","del kills_df_part1\n","del kills_df_part2\n","\n","del damage_df_part1\n","del damage_df_part2\n","\n","del gren_df_part1\n","del gren_df_part2"]},{"cell_type":"code","execution_count":10,"id":"380071df","metadata":{"id":"380071df","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504159582,"user_tz":300,"elapsed":180,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"447bbed8-4558-42df-f3dd-a50abf99a694"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":10}],"source":["gc.collect()"]},{"cell_type":"code","execution_count":11,"id":"6a2ac988","metadata":{"id":"6a2ac988","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504159694,"user_tz":300,"elapsed":116,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"b794fd50-0d6c-4ee2-db73-5267d0e63bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column: file, Unique Count: 14921, Total Count: 377629\n","Column: map, Unique Count: 8, Total Count: 377629\n","Column: round, Unique Count: 63, Total Count: 377629\n","Column: start_seconds, Unique Count: 5501, Total Count: 377629\n","Column: end_seconds, Unique Count: 5254, Total Count: 377629\n","Column: winner_team, Unique Count: 31, Total Count: 377629\n","Column: winner_side, Unique Count: 3, Total Count: 377629\n","Column: round_type, Unique Count: 5, Total Count: 377629\n","Column: ct_eq_val, Unique Count: 783, Total Count: 377629\n","Column: t_eq_val, Unique Count: 712, Total Count: 377629\n"]}],"source":["# Check unique values for each column\n","total_count = len(games_df)\n","for column in games_df.columns:\n","    unique_count = games_df[column].nunique()\n","    print(f\"Column: {column}, Unique Count: {unique_count}, Total Count: {total_count}\")\n"]},{"cell_type":"code","execution_count":12,"id":"48960730","metadata":{"id":"48960730","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504161595,"user_tz":300,"elapsed":2015,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"8163461c-5ed1-43ce-a957-93064e978d6d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column: file, Unique Count: 15064, Total Count: 2742646\n","Column: round, Unique Count: 63, Total Count: 2742646\n","Column: tick, Unique Count: 382726, Total Count: 2742646\n","Column: seconds, Unique Count: 4715, Total Count: 2742646\n","Column: att_team, Unique Count: 31, Total Count: 2742646\n","Column: vic_team, Unique Count: 31, Total Count: 2742646\n","Column: att_side, Unique Count: 2, Total Count: 2742646\n","Column: vic_side, Unique Count: 2, Total Count: 2742646\n","Column: wp, Unique Count: 42, Total Count: 2742646\n","Column: wp_type, Unique Count: 8, Total Count: 2742646\n","Column: ct_alive, Unique Count: 11, Total Count: 2742646\n","Column: t_alive, Unique Count: 11, Total Count: 2742646\n","Column: is_bomb_planted, Unique Count: 2, Total Count: 2742646\n"]}],"source":["total_count = len(kills_df)\n","for column in kills_df.columns:\n","    unique_count = kills_df[column].nunique()\n","    print(f\"Column: {column}, Unique Count: {unique_count}, Total Count: {total_count}\")\n","#kills_df = kills_df.drop(['vic_team', 'vic_side', 'wp', 'wp_type', 'is_bomb_planted'], axis=1)"]},{"cell_type":"code","execution_count":13,"id":"d0a5d1d4","metadata":{"id":"d0a5d1d4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504176903,"user_tz":300,"elapsed":15147,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"1e83821f-968f-4ead-ff28-978c775b597d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column: file, Unique Count: 14927, Total Count: 10538182\n","Column: round, Unique Count: 63, Total Count: 10538182\n","Column: tick, Unique Count: 452301, Total Count: 10538182\n","Column: seconds, Unique Count: 7301, Total Count: 10538182\n","Column: att_team, Unique Count: 32, Total Count: 10538182\n","Column: vic_team, Unique Count: 31, Total Count: 10538182\n","Column: att_side, Unique Count: 3, Total Count: 10538182\n","Column: vic_side, Unique Count: 2, Total Count: 10538182\n","Column: hp_dmg, Unique Count: 100, Total Count: 10538182\n","Column: arm_dmg, Unique Count: 101, Total Count: 10538182\n","Column: is_bomb_planted, Unique Count: 2, Total Count: 10538182\n","Column: bomb_site, Unique Count: 2, Total Count: 10538182\n","Column: hitbox, Unique Count: 9, Total Count: 10538182\n","Column: wp, Unique Count: 42, Total Count: 10538182\n","Column: wp_type, Unique Count: 8, Total Count: 10538182\n","Column: att_id, Unique Count: 23980, Total Count: 10538182\n","Column: att_rank, Unique Count: 1, Total Count: 10538182\n","Column: vic_id, Unique Count: 23986, Total Count: 10538182\n","Column: vic_rank, Unique Count: 1, Total Count: 10538182\n","Column: att_pos_x, Unique Count: 7058322, Total Count: 10538182\n","Column: att_pos_y, Unique Count: 6538913, Total Count: 10538182\n","Column: vic_pos_x, Unique Count: 7541727, Total Count: 10538182\n","Column: vic_pos_y, Unique Count: 6973005, Total Count: 10538182\n"]}],"source":["total_count = len(damage_df)\n","for column in damage_df.columns:\n","    unique_count = damage_df[column].nunique()\n","    print(f\"Column: {column}, Unique Count: {unique_count}, Total Count: {total_count}\")\n","# damage_df = damage_df.drop(['vic_team', 'vic_side'], axis=1)"]},{"cell_type":"code","execution_count":14,"id":"5a0b4122","metadata":{"id":"5a0b4122","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1702504183390,"user_tz":300,"elapsed":6488,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"6c326e89-f456-4858-bc43-0d1a89289269"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column: file, Unique Count: 14921, Total Count: 5246458\n","Column: round, Unique Count: 63, Total Count: 5246458\n","Column: seconds, Unique Count: 6360, Total Count: 5246458\n","Column: att_team, Unique Count: 31, Total Count: 5246458\n","Column: vic_team, Unique Count: 31, Total Count: 5246458\n","Column: att_id, Unique Count: 23946, Total Count: 5246458\n","Column: vic_id, Unique Count: 1, Total Count: 5246458\n","Column: att_side, Unique Count: 2, Total Count: 5246458\n","Column: vic_side, Unique Count: 2, Total Count: 5246458\n","Column: hp_dmg, Unique Count: 99, Total Count: 5246458\n","Column: arm_dmg, Unique Count: 20, Total Count: 5246458\n","Column: is_bomb_planted, Unique Count: 2, Total Count: 5246458\n","Column: bomb_site, Unique Count: 2, Total Count: 5246458\n","Column: hitbox, Unique Count: 1, Total Count: 5246458\n","Column: nade, Unique Count: 6, Total Count: 5246458\n","Column: att_rank, Unique Count: 1, Total Count: 5246458\n","Column: vic_rank, Unique Count: 1, Total Count: 5246458\n","Column: att_pos_x, Unique Count: 3940616, Total Count: 5246458\n","Column: att_pos_y, Unique Count: 3846129, Total Count: 5246458\n","Column: nade_land_x, Unique Count: 26550, Total Count: 5246458\n","Column: nade_land_y, Unique Count: 24991, Total Count: 5246458\n","Column: vic_pos_x, Unique Count: 791686, Total Count: 5246458\n","Column: vic_pos_y, Unique Count: 786247, Total Count: 5246458\n"]}],"source":["total_count = len(grenade_df)\n","for column in grenade_df.columns:\n","    unique_count = grenade_df[column].nunique()\n","    print(f\"Column: {column}, Unique Count: {unique_count}, Total Count: {total_count}\")\n","grenade_df = grenade_df.drop(['vic_team', 'vic_side'], axis=1)"]},{"cell_type":"code","execution_count":15,"id":"728ad972","metadata":{"id":"728ad972","executionInfo":{"status":"ok","timestamp":1702504187479,"user_tz":300,"elapsed":4091,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[],"source":["# Drop rows where 'round' column is NaN\n","games_df = games_df.dropna(subset=['round'])\n","kills_df = kills_df.dropna(subset=['round'])\n","damage_df = damage_df.dropna(subset=['round'])\n","grenade_df = grenade_df.dropna(subset=['round'])\n","\n","# Ensure the 'round' column is of the same data type (int) in all dataframes\n","games_df['round'] = games_df['round'].astype(int)\n","kills_df['round'] = kills_df['round'].astype(int)\n","damage_df['round'] = damage_df['round'].astype(int)\n","grenade_df['round'] = grenade_df['round'].astype(int)"]},{"cell_type":"code","source":["games_df = games_df.drop_duplicates()\n","kills_df = kills_df.drop_duplicates()\n","damage_df = damage_df.drop_duplicates()\n","grenade_df = grenade_df.drop_duplicates()"],"metadata":{"id":"Vn5z-TX286Yp","executionInfo":{"status":"ok","timestamp":1702504253620,"user_tz":300,"elapsed":66143,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"id":"Vn5z-TX286Yp","execution_count":16,"outputs":[]},{"cell_type":"markdown","id":"ce7507dd","metadata":{"id":"ce7507dd"},"source":["# Feature Engineering"]},{"cell_type":"code","source":["# X_games_df, y_games_df = games_df.drop(columns=['winner_side']), games_df['winner_side']\n","# X_games_df_train, y_games_df_train, X_games_df_test, y_games_df_test = train_test_split(X_games_df, y_games_df, test_size=0.3, random_state=42)"],"metadata":{"id":"_1R0iP1LTocO","executionInfo":{"status":"ok","timestamp":1702504253621,"user_tz":300,"elapsed":7,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"id":"_1R0iP1LTocO","execution_count":17,"outputs":[]},{"cell_type":"code","source":["# kills_df_train, kills_df_test = kills_df[(kills_df['file'] in X_games_df_train) & (kills_df['round'] in X_games_df_train)]"],"metadata":{"id":"BD3-XjWMT7At","executionInfo":{"status":"ok","timestamp":1702504253621,"user_tz":300,"elapsed":5,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"id":"BD3-XjWMT7At","execution_count":18,"outputs":[]},{"cell_type":"code","source":["\n","# Calculate Round Duration\n","games_df['round_duration'] = games_df['end_seconds'] - games_df['start_seconds']\n","\n","# Equipment Value Difference\n","games_df['eq_val_diff'] = games_df['ct_eq_val'] - games_df['t_eq_val']\n","\n","# Encode Round Type\n","games_df = pd.get_dummies(games_df, columns=['round_type'])\n","\n","# Aggregate Kills per Round\n","kills_agg = kills_df.groupby(['file', 'round']).size().reset_index(name='kills_per_round')\n","\n","# Calculate First Kill Time\n","first_kill_time = kills_df.groupby(['file', 'round'])['seconds'].min().reset_index(name='first_kill_time')\n","\n","# Merge with kills_agg\n","kills_agg = kills_agg.merge(first_kill_time, on=['file', 'round'])\n","\n","# Encode Weapon Types (if necessary)\n","# kills_df = pd.get_dummies(kills_df, columns=['wp_type'])  # Uncomment if you need this\n","\n","# Merge with games_df\n","games_df = games_df.merge(kills_agg, on=['file', 'round'])\n","\n","import pandas as pd\n","import numpy as np\n","\n","# Assuming you have loaded your datasets into DataFrames: games_df, kills_df, damage_df\n","\n","# Add last round winner\n","games_df['last_round_winner'] = games_df['winner_team'].shift(1)\n","games_df['last_round_winner'] = games_df['last_round_winner'].fillna('None')  # For the first round\n","\n","# Add momentum (example for a simple implementation)\n","games_df['momentum'] = games_df.groupby('file')['winner_team'].apply(lambda x: x.eq(x.shift()).cumsum())\n","\n","# Calculate distances for kills\n","def calculate_distance(row):\n","    return np.sqrt((row['att_pos_x'] - row['vic_pos_x']) ** 2 + (row['att_pos_y'] - row['vic_pos_y']) ** 2)\n","\n","kills_df['kill_distance'] = kills_df.merge(damage_df, how='inner', on=['file','round']).apply(calculate_distance, axis=1)\n","\n","# Aggregate Min/Max/Avg Kill Distance per round\n","kill_distance_agg = kills_df.groupby(['file', 'round']).agg(min_kill_distance=('kill_distance', 'min'),\n","                                                            max_kill_distance=('kill_distance', 'max'),\n","                                                            avg_kill_distance=('kill_distance', 'mean')).reset_index()\n","\n","# Merge with games_df\n","games_df = games_df.merge(kill_distance_agg, on=['file', 'round'], how='left')\n","\n","# Count Non-Lethal Damage Events\n","non_lethal_damage = damage_df[damage_df['hp_dmg'] > 0].groupby(['file', 'round']).size().reset_index(name='non_lethal_damage_events')\n","\n","# Merge with games_df\n","games_df = games_df.merge(non_lethal_damage, on=['file', 'round'], how='left')\n","\n","# Fill NaN values for rounds without any non-lethal damage or kill distance data\n","games_df.fillna({'min_kill_distance': 0, 'max_kill_distance': 0, 'avg_kill_distance': 0, 'non_lethal_damage_events': 0}, inplace=True)\n","\n","# Load your damage data\n","#damage_df = pd.read_csv('path_to_damage_data.csv')\n","\n","# Aggregate Total Damage per Round\n","total_damage = damage_df.groupby(['file', 'round']).agg({'hp_dmg': 'sum', 'arm_dmg': 'sum'}).reset_index()\n","total_damage['total_damage'] = total_damage['hp_dmg'] + total_damage['arm_dmg']\n","\n","# Merge with games_df\n","games_df = games_df.merge(total_damage, on=['file', 'round'])\n","\n","# Average Damage per Engagement (example, might need adjustment)\n","damage_df['engagement_damage'] = damage_df['hp_dmg'] + damage_df['arm_dmg']\n","avg_damage_engagement = damage_df.groupby(['file', 'round']).agg({'engagement_damage': 'mean'}).reset_index()\n","\n","# Merge with games_df\n","games_df = games_df.merge(avg_damage_engagement, on=['file', 'round'])\n","# Load your grenades data\n","#grenades_df = pd.read_csv('path_to_grenades_data.csv')\n","\n","# Grenades Used per Round\n","grenades_agg = grenades_df.groupby(['file', 'round']).size().reset_index(name='grenades_used')\n","\n","# Damage by Grenades\n","grenades_damage = grenades_df.groupby(['file', 'round']).agg({'hp_dmg': 'sum', 'arm_dmg': 'sum'}).reset_index()\n","\n","# Merge with games_df\n","games_df = games_df.merge(grenades_agg, on=['file', 'round'])\n","games_df = games_df.merge(grenades_damage, on=['file', 'round'])\n","\n","games_df.head()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CQsh5-FKE5od","outputId":"aac904b6-bcd1-477b-d233-a6276f97bdbc"},"id":"CQsh5-FKE5od","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-f71c62a4e925>:35: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.\n","To preserve the previous behavior, use\n","\n","\t>>> .groupby(..., group_keys=False)\n","\n","To adopt the future behavior and silence this warning, use \n","\n","\t>>> .groupby(..., group_keys=True)\n","  games_df['momentum'] = games_df.groupby('file')['winner_team'].apply(lambda x: x.eq(x.shift()).cumsum())\n"]}]},{"cell_type":"code","source":["# Kills\n","kills_df = kills_df.merge(damage_df[['file', 'round', 'tick', 'att_pos_x', 'att_pos_y', 'vic_pos_x', 'vic_pos_y']], how='inner', on=['file', 'round', 'tick'])\n","kills_df['dist_between_players'] = np.linalg.norm(kills_df[['att_pos_x', 'att_pos_y']].values-kills_df[['vic_pos_x','vic_pos_y']].values, axis=1)\n","kills_features = kills_df.sort_values(by='tick').groupby(['file', 'round']).agg(\n","    total_kills=('tick', 'count'), # total kills\n","    t_kills=('att_side', lambda x: (x == 'Terrorist').sum()), # terrorist kills\n","    ct_kills=('att_side', lambda x: (x == 'CounterTerrorist').sum()), # counterterrorist kills\n","    first_blood = ('att_side', 'first'), # first kill\n","    time_to_first_blood=('seconds', 'first'), # time to first kill\n","    min_dist_kill = ('dist_between_players', 'min'),\n","    avg_dist_kill = ('dist_between_players', 'mean'),\n","    max_dist_kill = ('dist_between_players', 'max'),\n",").reset_index()\n","kills_features.head()\n","# Damage\n","\n","damage_df = damage_df.merge(kills_df[['file', 'round', 'tick', 'ct_alive', 't_alive']], how='left', on=['file', 'round', 'tick'])\n","damage_df['dist_between_players'] = np.linalg.norm(damage_df[['att_pos_x', 'att_pos_y']].values-damage_df[['vic_pos_x','vic_pos_y']].values, axis=1)\n","dmg_features = damage_df.sort_values(by='tick').groupby(['file', 'round']).agg(\n","    total_hp_dmg=('hp_dmg', 'sum'),\n","    total_arm_dmg=('arm_dmg', 'sum'),\n","    first_dmg=('att_side', 'first'),\n","    min_dist_dmg = ('dist_between_players', 'min'),\n","    avg_dist_dmg = ('dist_between_players', 'mean'),\n","    max_dist_dmg = ('dist_between_players', 'max'),\n","    non_lethal_dmg_instances = ('t_alive', lambda x: x.isna().sum()),\n",")\n","dmg_features['total_dmg'] = dmg_features['total_hp_dmg'] + dmg_features['total_arm_dmg']\n","\n","# damage_df['vic_id_occurrences'] = damage_df.groupby(['file', 'round', 'vic_id'])['vic_id'].transform('count')\n","# damage_df.head()\n","# assists_df = damage_df[(damage_df['vic_id_occurrences'] > 1) & damage_df['t_alive'].notna()]\n","# assists_df['att_id']\n","# dmg_features['assists'] = assists_df.groupby(['file', 'round'])['att_id'].nunique().reset_index(name='assists')['assists']\n","dmg_features['friendly_first_instances'] = len(damage_df[damage_df['att_side'].astype(str) == damage_df['vic_side'].astype(str)])\n","t_damage_features = damage_df[damage_df['att_side'] == 'Terrorist'].groupby(['file', 'round']).agg(\n","    t_dmg_hp=('hp_dmg', 'sum'),\n","    t_dmg_arm=('arm_dmg', 'sum'),\n","    t_dmg_instances=('att_side', 'count'),\n","    t_friendly_fire_instances=('vic_side', lambda x: (x == 'Terrorist').sum())\n",").reset_index()\n","\n","# For CounterTerrorist\n","ct_damage_features = damage_df[damage_df['att_side'] == 'CounterTerrorist'].groupby(['file', 'round']).agg(\n","    ct_dmg_hp=('hp_dmg', 'sum'),\n","    ct_dmg_arm=('arm_dmg', 'sum'),\n","    ct_dmg_instances=('att_side', 'count'),\n","    ct_friendly_fire_instances=('vic_side', lambda x: (x == 'CounterTerrorist').sum())\n",").reset_index()\n","\n","dmg_features = dmg_features.merge(t_damage_features, how='outer', on=['file','round'])\n","dmg_features = dmg_features.merge(ct_damage_features, how='outer', on=['file','round'])\n","\n","# Time\n","games_df['round_duration'] = games_df['end_seconds'] - games_df['start_seconds']\n","games_df['last_round_winner'] = games_df['winner_side'].shift().astype('category') # previous round winner\n","games_df['econ_diff'] = games_df['ct_eq_val'] - games_df['t_eq_val']\n","\n","# Position\n","\n","# Team\n","# prev_row = None\n","# games_df['momentum'] = 0\n","# for index, row in games_df.head(15).iterrows():\n","#     print(row)\n","#     if index == 0 or row['file'] != prev_row['file']:\n","#         print(index, \" 1\")\n","#         games_df.at[index, 'momentum'] = 0\n","#     elif prev_row['winner_side'] == \"Terrorist\":\n","#         print(index, \" 2\")\n","#         games_df.at[index, 'momentum'] = max(0, prev_row['momentum'] + 1)\n","#     elif prev_row['winner_side'] == \"CounterTerrorist\":\n","#         print(index, \" 3\")\n","#         games_df.at[index, 'momentum'] = min(0, prev_row['momentum'] - 1)\n","#     else:\n","#         print(index, \" 4\")\n","#         games_df.at[index, 'momentum'] = 0\n","#     prev_row = row\n","# print(games_df.head(15))\n"],"metadata":{"id":"cO3bOgqITMqs"},"id":"cO3bOgqITMqs","execution_count":null,"outputs":[]},{"cell_type":"markdown","id":"ecbdf602","metadata":{"id":"ecbdf602"},"source":["## 3. Grenade Usage"]},{"cell_type":"code","execution_count":null,"id":"32e44eac","metadata":{"id":"32e44eac"},"outputs":[],"source":["# Counting the types and counts of grenades used by each side\n","grenade_features = grenade_df.groupby(['file', 'round']).agg(\n","    total_grenades=('nade', 'count'), # total grenades used in the round\n",").reset_index()\n","\n","# For Terrorist\n","t_grenade_features = grenade_df[grenade_df['att_side'] == 'Terrorist'].groupby(['file', 'round']).agg(\n","    t_nades=('nade', 'count'),\n","    t_unique_nades=('nade','nunique')\n",").reset_index()\n","\n","# For CounterTerrorist\n","ct_grenade_features = grenade_df[grenade_df['att_side'] == 'CounterTerrorist'].groupby(['file', 'round']).agg(\n","    ct_nades=('nade', 'count'),\n","    ct_unique_nades=('nade','nunique')\n",").reset_index()\n","\n","grenade_features = grenade_features.merge(t_grenade_features, how='outer', on=['file','round'])\n","grenade_features = grenade_features.merge(ct_grenade_features, how='outer', on=['file','round'])\n","# grenade_features['t_grenades'] = t_grenade_features['t_grenades']\n","# grenade_features['ct_grenades'] = ct_grenade_features['ct_grenades']"]},{"cell_type":"code","execution_count":null,"id":"9ca0a4f7","metadata":{"id":"9ca0a4f7","outputId":"616ccf9d-dd00-4f4a-86ed-71a14f171de4","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1701755810356,"user_tz":300,"elapsed":9,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      file  round  total_grenades  t_nades  t_unique_nades  \\\n","0  esea_match_13770997.dem      1               1      NaN             NaN   \n","1  esea_match_13770997.dem      2               8      4.0             3.0   \n","2  esea_match_13770997.dem      3               2      2.0             2.0   \n","3  esea_match_13770997.dem      4              20      9.0             3.0   \n","4  esea_match_13770997.dem      5               4      3.0             2.0   \n","\n","   ct_nades  ct_unique_nades  \n","0       1.0              1.0  \n","1       4.0              3.0  \n","2       NaN              NaN  \n","3      11.0              2.0  \n","4       1.0              1.0  "],"text/html":["\n","  <div id=\"df-4fcafe22-c9cd-4f5b-8925-9e2b447c6a83\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file</th>\n","      <th>round</th>\n","      <th>total_grenades</th>\n","      <th>t_nades</th>\n","      <th>t_unique_nades</th>\n","      <th>ct_nades</th>\n","      <th>ct_unique_nades</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>4</td>\n","      <td>20</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>11.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fcafe22-c9cd-4f5b-8925-9e2b447c6a83')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4fcafe22-c9cd-4f5b-8925-9e2b447c6a83 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4fcafe22-c9cd-4f5b-8925-9e2b447c6a83');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-06916dd9-7c2a-46d6-afe2-ff2cbfdd6a1f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-06916dd9-7c2a-46d6-afe2-ff2cbfdd6a1f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-06916dd9-7c2a-46d6-afe2-ff2cbfdd6a1f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":83}],"source":["# grenade_df.loc[(grenade_df.file == 'esea_match_13770997.dem') & (grenade_df['round'] < 4)]\n","grenade_features.head()\n","# t_grenade_features\n"]},{"cell_type":"code","execution_count":null,"id":"03f9271a","metadata":{"id":"03f9271a","outputId":"8f06ad29-c4c7-42e9-db4a-7d85ad8d98b9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701783481727,"user_tz":300,"elapsed":118,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":15}],"source":["# Merging the aggregated datasets with the games dataset\n","\"\"\"\n","merged_df = merged_df.merge(kills_features, on=['file', 'round'], how='left')\n","merged_df = merged_df.merge(damage_features, on=['file', 'round'], how='left')\n","merged_df = merged_df.merge(grenade_features, on=['file', 'round'], how='left')\n","\n","merged_df.head()\n","\"\"\"\n","# Merging kills data\n","\n","merged_games_df = games_df.merge(kills_features, on=['file', 'round'], how='left')\n","\n","gc.collect()"]},{"cell_type":"code","execution_count":null,"id":"031547ce","metadata":{"id":"031547ce","outputId":"d8460b91-436d-45e0-b81c-c6936cdb8202","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701783481947,"user_tz":300,"elapsed":222,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['file', 'map', 'round', 'start_seconds', 'end_seconds', 'winner_team',\n","       'winner_side', 'round_type', 'ct_eq_val', 't_eq_val', 'round_duration',\n","       'last_round_winner', 'econ_diff', 'total_kills', 't_kills', 'ct_kills',\n","       'first_blood', 'time_to_first_blood', 'min_dist_kill', 'avg_dist_kill',\n","       'max_dist_kill', 'total_hp_dmg', 'total_arm_dmg', 'first_dmg',\n","       'min_dist_dmg', 'avg_dist_dmg', 'max_dist_dmg',\n","       'non_lethal_dmg_instances', 'total_dmg', 'friendly_first_instances',\n","       't_dmg_hp', 't_dmg_arm', 't_dmg_instances', 't_friendly_fire_instances',\n","       'ct_dmg_hp', 'ct_dmg_arm', 'ct_dmg_instances',\n","       'ct_friendly_fire_instances'],\n","      dtype='object')"]},"metadata":{},"execution_count":16}],"source":["# Merging damage data\n","merged_games_df = merged_games_df.merge(dmg_features, on=['file', 'round'], how='left')\n","\n","gc.collect()\n","merged_games_df.columns"]},{"cell_type":"code","execution_count":null,"id":"d59edb01","metadata":{"id":"d59edb01","outputId":"02ca0ca8-42af-4d39-c610-84606ff18d25","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701783482613,"user_tz":300,"elapsed":668,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":17}],"source":["# Merging grenade data\n","merged_games_df = merged_games_df.merge(grenade_features, on=['file', 'round'], how='left')\n","\n","gc.collect()"]},{"cell_type":"code","execution_count":null,"id":"f129d3eb","metadata":{"id":"f129d3eb","outputId":"3ec9f27f-eafc-48d8-bd44-4e3bbd447edf","colab":{"base_uri":"https://localhost:8080/","height":325},"executionInfo":{"status":"ok","timestamp":1701778097384,"user_tz":300,"elapsed":117,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      file          map  round  start_seconds  end_seconds  \\\n","0  esea_match_13770997.dem  de_overpass      1        94.3125       161.00   \n","1  esea_match_13770997.dem  de_overpass      2       161.0000       279.50   \n","2  esea_match_13770997.dem  de_overpass      3       279.5000       341.00   \n","3  esea_match_13770997.dem  de_overpass      4       341.0000       435.50   \n","4  esea_match_13770997.dem  de_overpass      5       435.5000       484.25   \n","\n","        winner_team       winner_side    round_type  ct_eq_val  t_eq_val  ...  \\\n","0  Hentai Hooligans         Terrorist  PISTOL_ROUND       4300      4250  ...   \n","1  Hentai Hooligans         Terrorist           ECO       6300     19400  ...   \n","2  Hentai Hooligans         Terrorist      SEMI_ECO       7650     19250  ...   \n","3  Hentai Hooligans         Terrorist        NORMAL      24900     23400  ...   \n","4      Animal Style  CounterTerrorist           ECO       5400     20550  ...   \n","\n","   t_friendly_fire_instances ct_dmg_hp  ct_dmg_arm  ct_dmg_instances  \\\n","0                        0.0     432.0        42.0              11.0   \n","1                        0.0     387.0        42.0               8.0   \n","2                        1.0     179.0        40.0               8.0   \n","3                        1.0     487.0       119.0              27.0   \n","4                        1.0     496.0       149.0              19.0   \n","\n","   ct_friendly_fire_instances  total_grenades t_nades  t_unique_nades  \\\n","0                         0.0               1     NaN             NaN   \n","1                         0.0               8     4.0             3.0   \n","2                         0.0               2     2.0             2.0   \n","3                         0.0              20     9.0             3.0   \n","4                         0.0               4     3.0             2.0   \n","\n","   ct_nades  ct_unique_nades  \n","0       1.0              1.0  \n","1       4.0              3.0  \n","2       NaN              NaN  \n","3      11.0              2.0  \n","4       1.0              1.0  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-c00423e2-754d-44f2-b23c-ac5f1a6f824b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file</th>\n","      <th>map</th>\n","      <th>round</th>\n","      <th>start_seconds</th>\n","      <th>end_seconds</th>\n","      <th>winner_team</th>\n","      <th>winner_side</th>\n","      <th>round_type</th>\n","      <th>ct_eq_val</th>\n","      <th>t_eq_val</th>\n","      <th>...</th>\n","      <th>t_friendly_fire_instances</th>\n","      <th>ct_dmg_hp</th>\n","      <th>ct_dmg_arm</th>\n","      <th>ct_dmg_instances</th>\n","      <th>ct_friendly_fire_instances</th>\n","      <th>total_grenades</th>\n","      <th>t_nades</th>\n","      <th>t_unique_nades</th>\n","      <th>ct_nades</th>\n","      <th>ct_unique_nades</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>1</td>\n","      <td>94.3125</td>\n","      <td>161.00</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>PISTOL_ROUND</td>\n","      <td>4300</td>\n","      <td>4250</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>432.0</td>\n","      <td>42.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>2</td>\n","      <td>161.0000</td>\n","      <td>279.50</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>ECO</td>\n","      <td>6300</td>\n","      <td>19400</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>387.0</td>\n","      <td>42.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>8</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>3</td>\n","      <td>279.5000</td>\n","      <td>341.00</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>SEMI_ECO</td>\n","      <td>7650</td>\n","      <td>19250</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>179.0</td>\n","      <td>40.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>4</td>\n","      <td>341.0000</td>\n","      <td>435.50</td>\n","      <td>Hentai Hooligans</td>\n","      <td>Terrorist</td>\n","      <td>NORMAL</td>\n","      <td>24900</td>\n","      <td>23400</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>487.0</td>\n","      <td>119.0</td>\n","      <td>27.0</td>\n","      <td>0.0</td>\n","      <td>20</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>11.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>esea_match_13770997.dem</td>\n","      <td>de_overpass</td>\n","      <td>5</td>\n","      <td>435.5000</td>\n","      <td>484.25</td>\n","      <td>Animal Style</td>\n","      <td>CounterTerrorist</td>\n","      <td>ECO</td>\n","      <td>5400</td>\n","      <td>20550</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>496.0</td>\n","      <td>149.0</td>\n","      <td>19.0</td>\n","      <td>0.0</td>\n","      <td>4</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 43 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c00423e2-754d-44f2-b23c-ac5f1a6f824b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c00423e2-754d-44f2-b23c-ac5f1a6f824b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c00423e2-754d-44f2-b23c-ac5f1a6f824b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d7392c2e-d14a-4915-91d5-54d482f522bf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7392c2e-d14a-4915-91d5-54d482f522bf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d7392c2e-d14a-4915-91d5-54d482f522bf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":17}],"source":["# Displaying the first few rows of the merged dataframe\n","merged_games_df.head()"]},{"cell_type":"code","execution_count":null,"id":"6030f2d0","metadata":{"id":"6030f2d0","outputId":"5f28eb95-49b1-4a23-ebce-95d763bb4f94","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701755812442,"user_tz":300,"elapsed":273,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 377629 entries, 0 to 377628\n","Data columns (total 44 columns):\n"," #   Column                      Non-Null Count   Dtype   \n","---  ------                      --------------   -----   \n"," 0   file                        377629 non-null  object  \n"," 1   map                         377629 non-null  category\n"," 2   round                       377629 non-null  int64   \n"," 3   start_seconds               377589 non-null  float16 \n"," 4   end_seconds                 377589 non-null  float16 \n"," 5   winner_team                 377628 non-null  object  \n"," 6   winner_side                 377629 non-null  object  \n"," 7   round_type                  377629 non-null  category\n"," 8   ct_eq_val                   377629 non-null  int32   \n"," 9   t_eq_val                    377629 non-null  int32   \n"," 10  round_duration              377589 non-null  float16 \n"," 11  last_round_winner           377628 non-null  category\n"," 12  econ_diff                   377629 non-null  int32   \n"," 13  total_kills                 377629 non-null  int64   \n"," 14  t_kills                     377629 non-null  int64   \n"," 15  ct_kills                    377629 non-null  int64   \n"," 16  first_blood                 377629 non-null  category\n"," 17  time_to_first_blood         377589 non-null  float16 \n"," 18  min_dist_kill               377629 non-null  float64 \n"," 19  avg_dist_kill               377629 non-null  float64 \n"," 20  max_dist_kill               377629 non-null  float64 \n"," 21  total_hp_dmg                377629 non-null  int64   \n"," 22  total_arm_dmg               377629 non-null  int64   \n"," 23  first_dmg                   377629 non-null  category\n"," 24  min_dist_dmg                377629 non-null  float64 \n"," 25  avg_dist_dmg                377629 non-null  float64 \n"," 26  max_dist_dmg                377629 non-null  float64 \n"," 27  non_lethal_dmg_instances    377629 non-null  int64   \n"," 28  total_dmg                   377629 non-null  int64   \n"," 29  assists                     0 non-null       float64 \n"," 30  friendly_first_instances    377629 non-null  int64   \n"," 31  t_dmg_hp                    376566 non-null  float64 \n"," 32  t_dmg_arm                   376566 non-null  float64 \n"," 33  t_dmg_instances             376566 non-null  float64 \n"," 34  t_friendly_fire_instances   376566 non-null  float64 \n"," 35  ct_dmg_hp                   377179 non-null  float64 \n"," 36  ct_dmg_arm                  377179 non-null  float64 \n"," 37  ct_dmg_instances            377179 non-null  float64 \n"," 38  ct_friendly_fire_instances  377179 non-null  float64 \n"," 39  total_grenades              377629 non-null  int64   \n"," 40  t_nades                     347939 non-null  float64 \n"," 41  t_unique_nades              347939 non-null  float64 \n"," 42  ct_nades                    347688 non-null  float64 \n"," 43  ct_unique_nades             347688 non-null  float64 \n","dtypes: category(5), float16(4), float64(19), int32(3), int64(10), object(3)\n","memory usage: 104.1+ MB\n"]}],"source":["merged_games_df.info()"]},{"cell_type":"code","source":["merged_games_df = merged_games_df[merged_games_df['winner_side'] != 'None']"],"metadata":{"id":"5Zhv101Pjg0W"},"id":"5Zhv101Pjg0W","execution_count":null,"outputs":[]},{"cell_type":"code","source":["set(merged_games_df['winner_side'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u_wvOEV9j6rh","executionInfo":{"status":"ok","timestamp":1701755997383,"user_tz":300,"elapsed":135,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"5e5a6848-4a21-48cd-c7bb-8f9f3909fdac"},"id":"u_wvOEV9j6rh","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'CounterTerrorist', 'Terrorist'}"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["merged_games_df = merged_games_df.drop(columns=['file', 'round', 'start_seconds', 'end_seconds', 'winner_team'])\n","#merged_games_df = merged_games_df.drop(columns=['assists'])"],"metadata":{"id":"kwYUfjUdhq3l"},"id":"kwYUfjUdhq3l","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"eaff7c3d","metadata":{"id":"eaff7c3d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701783482613,"user_tz":300,"elapsed":4,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"64efc8cd-d375-4cb7-d33e-669338a2026b"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-20-037fa0f6137a>:6: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n","  for (name, _) in merged_games_df[nan_cols].iteritems():\n"]}],"source":["# Fill NaN values with zeros in the specified columns\n","# columns_to_fill = ['total_kills', 'ct_kills', 't_kills', 'total_damage',\n","#                    'damage_instances', 'total_grenades']\n","nan_cols = ['total_grenades', 't_nades', 't_unique_nades', 'ct_nades', 'ct_unique_nades', 't_friendly_fire_instances', 'ct_friendly_fire_instances']\n","\n","for (name, _) in merged_games_df[nan_cols].iteritems():\n","    merged_games_df[name] = merged_games_df[name].fillna(0)"]},{"cell_type":"code","execution_count":null,"id":"85d0d140","metadata":{"id":"85d0d140","executionInfo":{"status":"ok","timestamp":1701783482695,"user_tz":300,"elapsed":85,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cb1f185e-8b7c-46bd-ace7-53fa0e8b7582"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-21-fd24956a4531>:13: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n","  for (name, _) in merged_games_df[cols_to_fill_with_median].iteritems():\n"]},{"output_type":"stream","name":"stdout","text":["round_duration\n","time_to_first_blood\n","t_dmg_hp\n","t_dmg_arm\n","t_dmg_instances\n","ct_dmg_hp\n","ct_dmg_arm\n","ct_dmg_instances\n","ct_eq_val\n","t_eq_val\n","econ_diff\n"]}],"source":["# Fill missing values with the median\n","cols_to_fill_with_median = ['round_duration',\n","    'time_to_first_blood',\n","    't_dmg_hp',\n","    't_dmg_arm',\n","    't_dmg_instances',\n","    'ct_dmg_hp',\n","    'ct_dmg_arm',\n","    'ct_dmg_instances',\n","    'ct_eq_val', 't_eq_val', 'econ_diff'\n","]\n","\n","for (name, _) in merged_games_df[cols_to_fill_with_median].iteritems():\n","  print(name)\n","  merged_games_df[name] = merged_games_df[name].fillna(merged_games_df[name].median())"]},{"cell_type":"code","execution_count":null,"id":"812ac1f2","metadata":{"id":"812ac1f2","executionInfo":{"status":"ok","timestamp":1701783483334,"user_tz":300,"elapsed":641,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d4d27c73-c248-44c0-c615-e5af062cc1fe"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-22-0656de71c6fb>:7: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n","  for (name, _) in merged_games_df[columns_to_encode].iteritems():\n"]}],"source":["#Encode Multi-Class Categorical Variables\n","merged_games_df = pd.get_dummies(merged_games_df, columns=['map', 'round_type'])\n","columns_to_encode = ['winner_side', 'last_round_winner', 'first_blood', 'first_dmg']\n","# Create a label encoder object\n","le = LabelEncoder()\n","# Fit and transform the target variable\n","for (name, _) in merged_games_df[columns_to_encode].iteritems():\n","  merged_games_df[name] = le.fit_transform(merged_games_df[name])\n"]},{"cell_type":"code","execution_count":null,"id":"11aee192","metadata":{"id":"11aee192","outputId":"af6d2710-0144-40a1-cbd3-f755f459e222","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701756088835,"user_tz":300,"elapsed":169,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 377628 entries, 0 to 377628\n","Data columns (total 49 columns):\n"," #   Column                      Non-Null Count   Dtype  \n","---  ------                      --------------   -----  \n"," 0   winner_side                 377628 non-null  int64  \n"," 1   ct_eq_val                   377628 non-null  int32  \n"," 2   t_eq_val                    377628 non-null  int32  \n"," 3   round_duration              377628 non-null  float16\n"," 4   last_round_winner           377628 non-null  int64  \n"," 5   econ_diff                   377628 non-null  int32  \n"," 6   total_kills                 377628 non-null  int64  \n"," 7   t_kills                     377628 non-null  int64  \n"," 8   ct_kills                    377628 non-null  int64  \n"," 9   first_blood                 377628 non-null  int64  \n"," 10  time_to_first_blood         377628 non-null  float16\n"," 11  min_dist_kill               377628 non-null  float64\n"," 12  avg_dist_kill               377628 non-null  float64\n"," 13  max_dist_kill               377628 non-null  float64\n"," 14  total_hp_dmg                377628 non-null  int64  \n"," 15  total_arm_dmg               377628 non-null  int64  \n"," 16  first_dmg                   377628 non-null  int64  \n"," 17  min_dist_dmg                377628 non-null  float64\n"," 18  avg_dist_dmg                377628 non-null  float64\n"," 19  max_dist_dmg                377628 non-null  float64\n"," 20  non_lethal_dmg_instances    377628 non-null  int64  \n"," 21  total_dmg                   377628 non-null  int64  \n"," 22  friendly_first_instances    377628 non-null  int64  \n"," 23  t_dmg_hp                    377628 non-null  float64\n"," 24  t_dmg_arm                   377628 non-null  float64\n"," 25  t_dmg_instances             377628 non-null  float64\n"," 26  t_friendly_fire_instances   377628 non-null  float64\n"," 27  ct_dmg_hp                   377628 non-null  float64\n"," 28  ct_dmg_arm                  377628 non-null  float64\n"," 29  ct_dmg_instances            377628 non-null  float64\n"," 30  ct_friendly_fire_instances  377628 non-null  float64\n"," 31  total_grenades              377628 non-null  int64  \n"," 32  t_nades                     377628 non-null  float64\n"," 33  t_unique_nades              377628 non-null  float64\n"," 34  ct_nades                    377628 non-null  float64\n"," 35  ct_unique_nades             377628 non-null  float64\n"," 36  map_de_cache                377628 non-null  uint8  \n"," 37  map_de_cbble                377628 non-null  uint8  \n"," 38  map_de_dust2                377628 non-null  uint8  \n"," 39  map_de_inferno              377628 non-null  uint8  \n"," 40  map_de_mirage               377628 non-null  uint8  \n"," 41  map_de_nuke                 377628 non-null  uint8  \n"," 42  map_de_overpass             377628 non-null  uint8  \n"," 43  map_de_train                377628 non-null  uint8  \n"," 44  round_type_ECO              377628 non-null  uint8  \n"," 45  round_type_FORCE_BUY        377628 non-null  uint8  \n"," 46  round_type_NORMAL           377628 non-null  uint8  \n"," 47  round_type_PISTOL_ROUND     377628 non-null  uint8  \n"," 48  round_type_SEMI_ECO         377628 non-null  uint8  \n","dtypes: float16(2), float64(18), int32(3), int64(13), uint8(13)\n","memory usage: 102.6 MB\n"]}],"source":["merged_games_df.info()"]},{"cell_type":"code","execution_count":null,"id":"82095494","metadata":{"id":"82095494"},"outputs":[],"source":["# Feature Scaling\n","\n","scaler = StandardScaler()\n","numerical_cols = [\n","    'ct_eq_val', 't_eq_val', 'round_duration', 'econ_diff', 'total_kills',\n","    't_kills', 'ct_kills', 'time_to_first_blood', 'min_dist_kill',\n","    'avg_dist_kill', 'max_dist_kill', 'total_hp_dmg', 'total_arm_dmg',\n","    'min_dist_dmg', 'avg_dist_dmg', 'max_dist_dmg', 'non_lethal_dmg_instances',\n","    'total_dmg', 'friendly_first_instances', 't_dmg_hp', 't_dmg_arm',\n","    't_dmg_instances', 't_friendly_fire_instances', 'ct_dmg_hp', 'ct_dmg_arm',\n","    'ct_dmg_instances', 'ct_friendly_fire_instances', 'total_grenades',\n","    't_nades', 't_unique_nades', 'ct_nades', 'ct_unique_nades'\n","]\n","merged_games_df[numerical_cols] = scaler.fit_transform(merged_games_df[numerical_cols])\n"]},{"cell_type":"code","execution_count":null,"id":"a17b3e6d","metadata":{"id":"a17b3e6d"},"outputs":[],"source":["merged_games_df\n","\n","X = merged_games_df.drop(['winner_side'], axis=1)  # Exclude target variable\n","y = merged_games_df['winner_side']  # Target variable\n","\n","# Create a label encoder object\n","le = LabelEncoder()\n","\n","# Fit and transform the target variable\n","y = le.fit_transform(y)\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"]},{"cell_type":"code","execution_count":null,"id":"d6d6efb2","metadata":{"id":"d6d6efb2","outputId":"072ce95c-59fc-4d32-abc4-f03f3d79e495","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701756099272,"user_tz":300,"elapsed":179,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0         1\n","1         1\n","2         1\n","3         1\n","4         0\n","         ..\n","377624    1\n","377625    1\n","377626    1\n","377627    1\n","377628    1\n","Name: winner_side, Length: 377628, dtype: int64"]},"metadata":{},"execution_count":110}],"source":["merged_games_df['winner_side']"]},{"cell_type":"code","source":[],"metadata":{"id":"knMC6uGif9nm"},"id":"knMC6uGif9nm","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"ba188e84","metadata":{"id":"ba188e84"},"outputs":[],"source":["from sklearn.metrics import fbeta_score, roc_auc_score, make_scorer\n","# model = LogisticRegression(penalty='L1', solver='liblinear', max_iter=3000)\n","# model.fit(X_train, y_train)\n","\n","# # Predictions\n","# y_pred_test = model.predict(X_test)\n","# y_pred_train = model.predict(X_train)\n","# # Evaluation\n","# print(classification_report(y_test, y_pred_test))\n","# print(classification_report(y_train, y_pred_train))\n","\n","params = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n","scoring_metrics = {\n","    'roc_auc': 'roc_auc',\n","    'f1': make_scorer(fbeta_score, beta=1),\n","    'f2': make_scorer(fbeta_score, beta=2)\n","}\n","lr = LogisticRegression(penalty='l1', solver='liblinear', max_iter=3000)\n","clf = GridSearchCV(lr, params, scoring=scoring_metrics, refit=\"roc_auc\", return_train_score=True, cv=2)\n","clf.fit(X_train, y_train)\n","\n","train_roc_auc = clf.cv_results_['mean_train_roc_auc']\n","val_roc_auc = clf.cv_results_['mean_test_roc_auc']\n","\n","train_f1 = clf.cv_results_['mean_train_f1']\n","val_f1 = clf.cv_results_['mean_test_f1']\n","\n","train_f2 = clf.cv_results_['mean_train_f2']\n","val_f2 = clf.cv_results_['mean_test_f2']\n","\n","best_params = clf.best_params_\n","best_lr = LogisticRegression(**best_params)\n","best_lr.fit(X_train, y_train)\n","pred_y = best_lr.predict(X_test)\n","test_f1 = fbeta_score(list(y_test), list(pred_y), beta=1)\n","test_f2 = fbeta_score(list(y_test), list(pred_y), beta=2)\n","test_roc_auc = roc_auc_score(list(y_test), list(pred_y))\n","\n","result = {\n","        'train-auc': train_roc_auc,\n","        'train-f1': train_f1,\n","        'train-f2': train_f2,\n","        'val-auc': val_roc_auc,\n","        'val-f1': val_f1,\n","        'val-f2': val_f2,\n","        'test-auc': test_roc_auc,\n","        'test-f1': test_f1,\n","        'test-f2': test_f2,\n","        'params': params\n","        }\n","\n","print(result)\n","print(best_params)\n","from sklearn.metrics import confusion_matrix\n","print(confusion_matrix(y_test, pred_y))"]},{"cell_type":"code","source":["best_params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hs1wFqTKucrJ","executionInfo":{"status":"ok","timestamp":1701758753911,"user_tz":300,"elapsed":561,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"0343c527-2984-4b80-8d17-9e091aeaaa83"},"id":"Hs1wFqTKucrJ","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'C': 10}"]},"metadata":{},"execution_count":112}]},{"cell_type":"code","source":["\n","\n","params = {'max_depth': [1,2,3,4,5], 'min_samples_leaf': [1,2,3,4,5]}\n","scoring_metrics = {\n","    'roc_auc': 'roc_auc',\n","    'f1': make_scorer(fbeta_score, beta=1),\n","    'f2': make_scorer(fbeta_score, beta=2)\n","}\n","dt = DecisionTreeClassifier()\n","clf = GridSearchCV(dt, params, scoring=scoring_metrics, refit=\"roc_auc\", return_train_score=True, cv=2)\n","clf.fit(X_train, y_train)\n","\n","train_roc_auc = clf.cv_results_['mean_train_roc_auc']\n","val_roc_auc = clf.cv_results_['mean_test_roc_auc']\n","\n","train_f1 = clf.cv_results_['mean_train_f1']\n","val_f1 = clf.cv_results_['mean_test_f1']\n","\n","train_f2 = clf.cv_results_['mean_train_f2']\n","val_f2 = clf.cv_results_['mean_test_f2']\n","\n","best_params = clf.best_params_\n","best_dt = DecisionTreeClassifier(**best_params)\n","best_dt.fit(X_train, y_train)\n","pred_y = best_dt.predict(X_test)\n","test_f1 = fbeta_score(list(y_test), list(pred_y), beta=1)\n","test_f2 = fbeta_score(list(y_test), list(pred_y), beta=2)\n","test_roc_auc = roc_auc_score(list(y_test), list(pred_y))\n","\n","result = {\n","        'train-auc': train_roc_auc,\n","        'train-f1': train_f1,\n","        'train-f2': train_f2,\n","        'val-auc': val_roc_auc,\n","        'val-f1': val_f1,\n","        'val-f2': val_f2,\n","        'test-auc': test_roc_auc,\n","        'test-f1': test_f1,\n","        'test-f2': test_f2,\n","        'params': params\n","        }\n","\n","print(result)\n","print(best_params)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J_i-FCXtusaG","executionInfo":{"status":"ok","timestamp":1701783971862,"user_tz":300,"elapsed":77232,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"49c1864d-e0cb-4c4b-95d8-5010f31d6da9"},"id":"J_i-FCXtusaG","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'train-auc': array([0.9528357 , 0.9528357 , 0.9528357 , 0.9528357 , 0.9528357 ,\n","       0.9761731 , 0.9761731 , 0.9761731 , 0.9761731 , 0.9761731 ,\n","       0.98555035, 0.98555035, 0.98555035, 0.98555035, 0.98555035,\n","       0.99411982, 0.99411982, 0.99411982, 0.99411982, 0.99411982,\n","       0.99601041, 0.99601041, 0.99601001, 0.99601298, 0.99601264]), 'train-f1': array([0.9544716 , 0.9544716 , 0.9544716 , 0.9544716 , 0.9544716 ,\n","       0.97016562, 0.97016562, 0.97016562, 0.97016562, 0.97016562,\n","       0.97307635, 0.97307635, 0.97307635, 0.97307635, 0.97307635,\n","       0.97935982, 0.97935982, 0.97935982, 0.97935982, 0.97935982,\n","       0.98079649, 0.98079649, 0.98079333, 0.9807869 , 0.98078033]), 'train-f2': array([0.95757877, 0.95757877, 0.95757877, 0.95757877, 0.95757877,\n","       0.97556149, 0.97556149, 0.97556149, 0.97556149, 0.97556149,\n","       0.97695611, 0.97695611, 0.97695611, 0.97695611, 0.97695611,\n","       0.98117618, 0.98117618, 0.98117618, 0.98117618, 0.98117618,\n","       0.98183777, 0.98183777, 0.98183651, 0.98183006, 0.9818197 ]), 'val-auc': array([0.9528357 , 0.9528357 , 0.9528357 , 0.9528357 , 0.9528357 ,\n","       0.9761731 , 0.9761731 , 0.9761731 , 0.9761731 , 0.9761731 ,\n","       0.98552456, 0.98552456, 0.98552456, 0.98552456, 0.98552456,\n","       0.99405672, 0.99405672, 0.99405672, 0.99405672, 0.99405672,\n","       0.99587554, 0.99587439, 0.99590012, 0.99588261, 0.99587992]), 'val-f1': array([0.9544716 , 0.9544716 , 0.9544716 , 0.9544716 , 0.9544716 ,\n","       0.97016562, 0.97016562, 0.97016562, 0.97016562, 0.97016562,\n","       0.97307635, 0.97307635, 0.97307635, 0.97307635, 0.97307635,\n","       0.97910018, 0.97910018, 0.97910018, 0.97910018, 0.97910018,\n","       0.98017825, 0.98015302, 0.98018191, 0.98017497, 0.98011255]), 'val-f2': array([0.95757877, 0.95757877, 0.95757877, 0.95757877, 0.95757877,\n","       0.97556149, 0.97556149, 0.97556149, 0.97556149, 0.97556149,\n","       0.97695611, 0.97695611, 0.97695611, 0.97695611, 0.97695611,\n","       0.98086682, 0.98086682, 0.98086682, 0.98086682, 0.98086682,\n","       0.98111082, 0.9811007 , 0.98112774, 0.98110564, 0.98100718]), 'test-auc': 0.9799614650993501, 'test-f1': 0.9805834010656552, 'test-f2': 0.9833159972883321, 'params': {'max_depth': [1, 2, 3, 4, 5], 'min_samples_leaf': [1, 2, 3, 4, 5]}}\n","{'max_depth': 5, 'min_samples_leaf': 3}\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","print(confusion_matrix(y_test, pred_y))\n","#clf.cv_results_"],"metadata":{"id":"UaTX7WHfxGsf"},"id":"UaTX7WHfxGsf","execution_count":null,"outputs":[]},{"cell_type":"code","source":["params = {'n_estimators': [100,150,200], 'max_depth': np.arange(1,6), 'min_samples_leaf': np.arange(1,6)}\n","scoring_metrics = {\n","    'roc_auc': 'roc_auc',\n","    'f1': make_scorer(fbeta_score, beta=1),\n","    'f2': make_scorer(fbeta_score, beta=2)\n","}\n","rf = RandomForestClassifier()\n","clf = GridSearchCV(rf, params, scoring=scoring_metrics, refit=\"roc_auc\", return_train_score=True, cv=2)\n","clf.fit(X_train, y_train)\n","\n","train_roc_auc = clf.cv_results_['mean_train_roc_auc']\n","val_roc_auc = clf.cv_results_['mean_test_roc_auc']\n","\n","train_f1 = clf.cv_results_['mean_train_f1']\n","val_f1 = clf.cv_results_['mean_test_f1']\n","\n","train_f2 = clf.cv_results_['mean_train_f2']\n","val_f2 = clf.cv_results_['mean_test_f2']\n","\n","best_params = clf.best_params_\n","best_rf = RandomForestClassifier(**best_params)\n","\n","best_rf.fit(X_train, y_train)\n","pred_y = best_rf.predict(X_test)\n","test_f1 = fbeta_score(list(y_test), list(pred_y), beta=1)\n","test_f2 = fbeta_score(list(y_test), list(pred_y), beta=2)\n","test_roc_auc = roc_auc_score(list(y_test), list(pred_y))\n","\n","results= {\n","    'train-auc': train_roc_auc,\n","    'train-f1': train_f1,\n","    'train-f2': train_f2,\n","    'val-auc': val_roc_auc,\n","    'val-f1': val_f1,\n","    'val-f2': val_f2,\n","    'test-auc': test_roc_auc,\n","    'test-f1': test_f1,\n","    'test-f2': test_f2,\n","    'params': params\n","    }\n","print(results)\n","print(best_params)\n","print(confusion_matrix(y_test, pred_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VtW8jWqvSKC","executionInfo":{"status":"ok","timestamp":1701781957066,"user_tz":300,"elapsed":3231766,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"cea76fff-428d-4dde-834c-4fefb6668372"},"id":"3VtW8jWqvSKC","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'train-auc': array([0.99169442, 0.99200651, 0.99215301, 0.99203657, 0.99202559,\n","       0.99242736, 0.99205484, 0.99227327, 0.99214542, 0.99199979,\n","       0.99188128, 0.99249475, 0.99158104, 0.99218186, 0.99234846,\n","       0.99451477, 0.9948381 , 0.99452429, 0.99460039, 0.99478756,\n","       0.99474985, 0.99418138, 0.99461892, 0.99442062, 0.99427317,\n","       0.99476905, 0.99456528, 0.99448654, 0.99463411, 0.99480319,\n","       0.99537146, 0.99546382, 0.99557963, 0.99564704, 0.9955567 ,\n","       0.99565566, 0.99557608, 0.99535913, 0.99556466, 0.99552643,\n","       0.99557585, 0.99566628, 0.99553345, 0.99546192, 0.99556592,\n","       0.9960359 , 0.99622478, 0.99625223, 0.99615119, 0.99628478,\n","       0.99631683, 0.99620971, 0.99606012, 0.99621035, 0.99612095,\n","       0.99627285, 0.9962724 , 0.99627492, 0.99622998, 0.99627261,\n","       0.99674676, 0.99676159, 0.9968232 , 0.99670529, 0.99676683,\n","       0.99680666, 0.99683291, 0.99677187, 0.99682898, 0.99679947,\n","       0.99678709, 0.99682709, 0.99683043, 0.99678301, 0.99685247]), 'train-f1': array([0.96207383, 0.96249835, 0.96409592, 0.96412226, 0.96258244,\n","       0.96701297, 0.96499594, 0.96626784, 0.96508769, 0.96420577,\n","       0.96323265, 0.96656524, 0.96074436, 0.96441603, 0.96698316,\n","       0.9732216 , 0.97450168, 0.97466007, 0.97275777, 0.97450242,\n","       0.97578053, 0.96961557, 0.97291487, 0.97517391, 0.97322908,\n","       0.97430956, 0.97470703, 0.97391689, 0.97399045, 0.97472774,\n","       0.97608828, 0.97649669, 0.97695754, 0.97684059, 0.97660104,\n","       0.97677774, 0.97668231, 0.9747904 , 0.97661136, 0.97632598,\n","       0.97625135, 0.97698132, 0.97625714, 0.97659593, 0.97698921,\n","       0.97714752, 0.97731794, 0.97770046, 0.97742654, 0.97737041,\n","       0.97766426, 0.97761782, 0.97729986, 0.97756296, 0.97744059,\n","       0.9776819 , 0.97754787, 0.97754536, 0.97774026, 0.97775866,\n","       0.97809508, 0.97809946, 0.97805425, 0.97813247, 0.97799065,\n","       0.97818684, 0.97809742, 0.97813323, 0.97825754, 0.97805468,\n","       0.97815038, 0.97814173, 0.9782687 , 0.97804967, 0.97816572]), 'train-f2': array([0.96290763, 0.96584655, 0.96593792, 0.96631305, 0.96629251,\n","       0.96770218, 0.96511086, 0.96784419, 0.96702539, 0.96691525,\n","       0.96559376, 0.96652422, 0.96492358, 0.96729256, 0.96703562,\n","       0.97263571, 0.97425088, 0.97470512, 0.97259681, 0.97449116,\n","       0.97679728, 0.96834877, 0.97199768, 0.97472471, 0.97415139,\n","       0.97405704, 0.97389528, 0.97306807, 0.97440939, 0.97465707,\n","       0.97598325, 0.97723513, 0.97753566, 0.97763569, 0.97704853,\n","       0.97753716, 0.97714648, 0.97382008, 0.97683989, 0.97729811,\n","       0.97753094, 0.97742921, 0.97648158, 0.97755312, 0.97706097,\n","       0.97780901, 0.97846863, 0.97833207, 0.97780471, 0.97829647,\n","       0.97785342, 0.97777294, 0.97814834, 0.97830404, 0.97843277,\n","       0.97824727, 0.97856858, 0.97791028, 0.97840214, 0.97839402,\n","       0.97842432, 0.97854598, 0.97849694, 0.97842767, 0.97871509,\n","       0.97881688, 0.97857611, 0.97862139, 0.97862087, 0.97876779,\n","       0.97857795, 0.97851261, 0.97849767, 0.97871553, 0.97874653]), 'val-auc': array([0.99168055, 0.991997  , 0.99213396, 0.99199801, 0.99207229,\n","       0.99242849, 0.99205055, 0.99229009, 0.99215311, 0.99202006,\n","       0.99188178, 0.99244932, 0.99159801, 0.99218237, 0.99232195,\n","       0.99450383, 0.99482998, 0.9945182 , 0.99460364, 0.99478028,\n","       0.99474916, 0.99417276, 0.99460885, 0.99439355, 0.99427302,\n","       0.99476948, 0.99455444, 0.99450037, 0.99466544, 0.9947866 ,\n","       0.9953439 , 0.99543518, 0.99555813, 0.99560505, 0.99553827,\n","       0.99564816, 0.99554327, 0.99532728, 0.9955451 , 0.99551356,\n","       0.99553594, 0.99564678, 0.99552132, 0.99544405, 0.99556092,\n","       0.99604045, 0.99617332, 0.99620562, 0.99610938, 0.99624371,\n","       0.99626866, 0.99617917, 0.99604516, 0.99618661, 0.99610777,\n","       0.9962423 , 0.99623059, 0.99625043, 0.99617774, 0.99623655,\n","       0.99666976, 0.99670361, 0.99674235, 0.99662566, 0.99668625,\n","       0.99675358, 0.99677102, 0.99670135, 0.99675577, 0.99675557,\n","       0.99670769, 0.99675211, 0.99673548, 0.99669647, 0.9967878 ]), 'val-f1': array([0.962296  , 0.96238253, 0.9642819 , 0.9641575 , 0.96259851,\n","       0.96703241, 0.96506129, 0.96616242, 0.96496583, 0.96415804,\n","       0.96326079, 0.96657035, 0.96070199, 0.96451312, 0.96681264,\n","       0.97316166, 0.97464326, 0.97448645, 0.97293575, 0.97443422,\n","       0.97576307, 0.96977963, 0.97319886, 0.97515112, 0.97314733,\n","       0.97434734, 0.97475572, 0.97392583, 0.97409971, 0.97468659,\n","       0.97597514, 0.97647897, 0.97691365, 0.97666729, 0.97649821,\n","       0.97670988, 0.9767834 , 0.97479779, 0.97646792, 0.97631443,\n","       0.97618449, 0.97695957, 0.97625567, 0.97641756, 0.97688144,\n","       0.97716182, 0.9771848 , 0.97751375, 0.9772583 , 0.97731939,\n","       0.97762128, 0.9774916 , 0.9773154 , 0.97747641, 0.97717212,\n","       0.97750756, 0.97741791, 0.97756854, 0.97772638, 0.97763102,\n","       0.97790573, 0.97782806, 0.97794917, 0.97788007, 0.97781585,\n","       0.97784263, 0.9777709 , 0.97805359, 0.97801268, 0.97781584,\n","       0.97802409, 0.97798592, 0.97811117, 0.97777481, 0.97799883]), 'val-f2': array([0.96308021, 0.96577681, 0.96619459, 0.96636542, 0.96640675,\n","       0.96759359, 0.96513949, 0.96763964, 0.96689122, 0.96671472,\n","       0.96567874, 0.9664481 , 0.96486405, 0.96730474, 0.96686251,\n","       0.97254202, 0.97430748, 0.97447315, 0.97273388, 0.97441357,\n","       0.9767517 , 0.96851123, 0.97228936, 0.97469628, 0.97410308,\n","       0.97393662, 0.97403097, 0.97299026, 0.97465024, 0.9746831 ,\n","       0.97579481, 0.97717777, 0.97751805, 0.97747344, 0.97695718,\n","       0.97746357, 0.97720253, 0.97369903, 0.97673599, 0.97716208,\n","       0.97748092, 0.97742824, 0.97652747, 0.97750481, 0.97692112,\n","       0.97786112, 0.97830708, 0.97814902, 0.97753622, 0.97817553,\n","       0.97786717, 0.97771857, 0.97806954, 0.97814566, 0.97821308,\n","       0.9780653 , 0.97840828, 0.97786542, 0.97836179, 0.97821531,\n","       0.97825569, 0.97825555, 0.97842777, 0.97823382, 0.97851748,\n","       0.97848568, 0.97830614, 0.9785663 , 0.97837972, 0.97851746,\n","       0.97843842, 0.97841156, 0.97835337, 0.97841211, 0.97859847]), 'test-auc': 0.9783028739219038, 'test-f1': 0.9788198130550737, 'test-f2': 0.9795045862051096, 'params': {'n_estimators': [100, 150, 200], 'max_depth': array([1, 2, 3, 4, 5]), 'min_samples_leaf': array([1, 2, 3, 4, 5])}}\n","{'max_depth': 5, 'min_samples_leaf': 5, 'n_estimators': 200}\n","[[36087   863]\n"," [  773 37803]]\n"]}]},{"cell_type":"code","source":["params = {'n_estimators': [100,150,200], 'max_depth': np.arange(1,6), 'learning_rate': [0.01,0.05,0.1], 'subsample': [0.8,0.9,1], 'reg_alpha': [0, 0.5, 1],\n","    'reg_lambda': [0.5, 1, 5],\n","          'min_child_weight': [1,2,3],\n","          'subsample': [0.7, 0.8, 0.9, 1]}\n","scoring_metrics = {\n","    'roc_auc': 'roc_auc',\n","    'f1': make_scorer(fbeta_score, beta=1),\n","    'f2': make_scorer(fbeta_score, beta=2)\n","}\n","xgb = XGBClassifier()\n","clf = GridSearchCV(xgb, params, scoring=scoring_metrics, refit=\"roc_auc\", return_train_score=True, cv=2)\n","clf.fit(X_train, y_train)\n","\n","train_roc_auc = clf.cv_results_['mean_train_roc_auc']\n","val_roc_auc = clf.cv_results_['mean_test_roc_auc']\n","\n","train_f1 = clf.cv_results_['mean_train_f1']\n","val_f1 = clf.cv_results_['mean_test_f1']\n","\n","train_f2 = clf.cv_results_['mean_train_f2']\n","val_f2 = clf.cv_results_['mean_test_f2']\n","\n","best_params = clf.best_params_\n","best_xgb = XGBClassifier(**best_params)\n","\n","best_xgb.fit(X_train, y_train)\n","pred_y = best_xgb.predict(X_test)\n","test_f1 = fbeta_score(list(y_test), list(pred_y), beta=1)\n","test_f2 = fbeta_score(list(y_test), list(pred_y), beta=2)\n","test_roc_auc = roc_auc_score(list(y_test), list(pred_y))\n","\n","results= {\n","    'train-auc': train_roc_auc,\n","    'train-f1': train_f1,\n","    'train-f2': train_f2,\n","    'val-auc': val_roc_auc,\n","    'val-f1': val_f1,\n","    'val-f2': val_f2,\n","    'test-auc': test_roc_auc,\n","    'test-f1': test_f1,\n","    'test-f2': test_f2,\n","    'params': params\n","    }\n","\n","# best_max_depth = best_params['max_depth']\n","# best_min_samples_leaf = best_params['min_samples_leaf']\n","# best_index = (\n","#     (np.array(params['max_depth']) == best_max_depth) &\n","#     (np.array(params['min_samples_leaf']) == best_min_samples_leaf)\n","# ).nonzero()[0][0]\n","\n","# Print the AUC, F1, and F2 scores for training and validation sets\n","print(results)\n","print(best_params)\n","print(confusion_matrix(y_test, pred_y))\n"],"metadata":{"id":"9rQApTA6v4F3"},"id":"9rQApTA6v4F3","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_accuracy = accuracy_score(y_train, best_rf.predict(X_train))\n","val_accuracy = accuracy_score(y_val, best_rf.predict(X_val))\n","test_accuracy = accuracy_score(y_test, pred_y)\n","\n","# Add accuracy to the results dictionary\n","results['train-accuracy'] = train_accuracy\n","results['val-accuracy'] = val_accuracy\n","results['test-accuracy'] = test_accuracy"],"metadata":{"id":"cwn06W4Iv5Y2"},"id":"cwn06W4Iv5Y2","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"955cdd2f","metadata":{"id":"955cdd2f","outputId":"d65e8cbe-c1bd-40e0-ba7f-8b367709a744","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701723484403,"user_tz":300,"elapsed":449,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9823504488520509, Precision: 0.9831301197653356, Recall: 0.9808760856665049, F1 Score: 0.982001809270486, ROC AUC: 0.9823240305582082\n"]}],"source":["accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1 Score: {f1}, ROC AUC: {roc_auc}\")\n"]},{"cell_type":"markdown","id":"2b41cfc5","metadata":{"id":"2b41cfc5"},"source":["## Decision Tree"]},{"cell_type":"code","execution_count":null,"id":"38c2997f","metadata":{"id":"38c2997f","outputId":"93a59d51-b9ac-4589-e73f-3622424b1e2f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701662596299,"user_tz":300,"elapsed":18309,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9851706697031486, Precision: 0.984947396816833, Recall: 0.9848411285537034, F1 Score: 0.9848942598187312, ROC AUC: 0.985164764838591\n"]}],"source":["dtree = DecisionTreeClassifier()\n","dtree.fit(X_train, y_train)\n","\n","y_pred = dtree.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1 Score: {f1}, ROC AUC: {roc_auc}\")\n"]},{"cell_type":"markdown","id":"b61a6084","metadata":{"id":"b61a6084"},"source":["## Random Forest"]},{"cell_type":"code","execution_count":null,"id":"7f7f8e0e","metadata":{"id":"7f7f8e0e","outputId":"aa278c3e-b069-4db5-f72a-8a3f048ae117","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701662678843,"user_tz":300,"elapsed":82549,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9943463178243254, \n","Precision: 0.9946014522093557, \n","Recall: 0.9938771106435778, \n","F1 Score: 0.9942391494987927, \n","ROC AUC: 0.9943379103618389\n"]}],"source":["rf = RandomForestClassifier()\n","rf.fit(X_train, y_train)\n","\n","y_pred = rf.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, \\nPrecision: {precision}, \\nRecall: {recall}, \\nF1 Score: {f1}, \\nROC AUC: {roc_auc}\")\n"]},{"cell_type":"markdown","source":["Neural Network"],"metadata":{"id":"MPFy1Y8aE7lx"},"id":"MPFy1Y8aE7lx"},{"cell_type":"code","source":["mlp = MLPClassifier()\n","mlp.fit(X_train, y_train)\n","\n","y_pred = mlp.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, \\nPrecision: {precision}, \\nRecall: {recall}, \\nF1 Score: {f1}, \\nROC AUC: {roc_auc}\")"],"metadata":{"id":"-JxkkskxFD2R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701662785996,"user_tz":300,"elapsed":107158,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}},"outputId":"33e29756-dc0e-473e-9fb8-ea410939ea9c"},"id":"-JxkkskxFD2R","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9993512167995128, \n","Precision: 0.9994873593610879, \n","Recall: 0.9991908075740411, \n","F1 Score: 0.9993390614672836, \n","ROC AUC: 0.9993483425158252\n"]}]},{"cell_type":"markdown","id":"8ce675bd","metadata":{"id":"8ce675bd"},"source":["## XGBOOST"]},{"cell_type":"code","execution_count":null,"id":"c657b62e","metadata":{"id":"c657b62e","outputId":"9ce0ceef-c766-4b2e-e2d9-4df7b985a91c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701662808760,"user_tz":300,"elapsed":22767,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9994174191669094, \n","Precision: 0.9995682909718849, \n","Recall: 0.9992447537357717, \n","F1 Score: 0.9994064961692025, \n","ROC AUC: 0.9994143252710899\n"]}],"source":["xgb = XGBClassifier()\n","xgb.fit(X_train, y_train)\n","\n","y_pred = xgb.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, \\nPrecision: {precision}, \\nRecall: {recall}, \\nF1 Score: {f1}, \\nROC AUC: {roc_auc}\")\n"]},{"cell_type":"code","execution_count":null,"id":"14646bb9","metadata":{"id":"14646bb9","outputId":"4f08ae21-941e-45b3-fd93-1191570ceaf0","colab":{"base_uri":"https://localhost:8080/","height":463},"executionInfo":{"status":"error","timestamp":1701663170260,"user_tz":300,"elapsed":361504,"user":{"displayName":"Sam Miller","userId":"16998009826625531901"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.\n","  warnings.warn(\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-150-fe66d704fa8e>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Fit the grid search to the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Extract the best parameters and best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    819\u001b[0m                     )\n\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    822\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    823\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1950\u001b[0m         \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1952\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1954\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1593\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1594\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1595\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1596\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1597\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mGeneratorExit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1705\u001b[0m                 (self._jobs[0].get_status(\n\u001b[1;32m   1706\u001b[0m                     timeout=self.timeout) == TASK_PENDING)):\n\u001b[0;32m-> 1707\u001b[0;31m                 \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1708\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["param_grid = {\n","    'n_estimators': [10, 25, 50, 100],  # Number of trees in the forest\n","    'max_depth': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]        # Maximum depth of the tree\n","}\n","\n","grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1)\n","\n","# Fit the grid search to the data\n","grid_search.fit(X_train, y_train)\n","\n","# Extract the best parameters and best model\n","best_params = grid_search.best_params_\n","best_model = grid_search.best_estimator_\n","\n","print(\"Best Parameters:\", best_params)\n","\n","y_pred = best_model.predict(X_test)\n","\n","# Evaluate the best model\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, pos_label=0)\n","recall = recall_score(y_test, y_pred, pos_label=0)\n","f1 = f1_score(y_test, y_pred, pos_label=0)\n","roc_auc = roc_auc_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}, \\nPrecision: {precision}, \\nRecall: {recall}, \\nF1 Score: {f1}, \\nROC AUC: {roc_auc}\")\n","\n"]},{"cell_type":"code","execution_count":null,"id":"2315e56d","metadata":{"id":"2315e56d"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"3b92ed1a","metadata":{"id":"3b92ed1a"},"outputs":[],"source":["\n","# Example using accuracy for cross-validation with Random Forest\n","cv_scores = cross_val_score(rf, X, y, cv=5, scoring='accuracy')\n","print(f\"CV Scores: {cv_scores}\")\n"]},{"cell_type":"code","execution_count":null,"id":"c5bf8b80","metadata":{"id":"c5bf8b80"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.4"},"colab":{"provenance":[{"file_id":"168xYbA-qq_YCFoHpJBNE-Hdqv_yTXOEl","timestamp":1701634091166}]}},"nbformat":4,"nbformat_minor":5}